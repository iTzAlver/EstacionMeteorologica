<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj\Estacion.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj\Estacion.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Wed Dec 11 13:35:41 2019
<BR><P>
<H3>Maximum Stack Usage =        384 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
TIMER0_IRQHandler &rArr; _subAnemoTempe &rArr; medirBMP &rArr; procesarDato &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[17c]">mem_set</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17c]">mem_set</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[21]">BOD_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">BOD_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[20]">ADC_IRQHandler</a> from ldr.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[21]">BOD_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2c]">CANActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[23]">CAN_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[24]">DMA_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1c]">EINT0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1d]">EINT1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1e]">EINT2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1f]">EINT3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[26]">ENET_IRQHandler</a> from emac_lpc17xx_lan8720.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[14]">I2C0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[15]">I2C1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[16]">I2C2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[25]">I2S_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[28]">MCPWM_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1a]">PLL0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2a]">PLL1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[13]">PWM1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[29]">QEI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[27]">RIT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1b]">RTC_IRQHandler</a> from rtc.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[17]">SPI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[18]">SSP0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[19]">SSP1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from timers.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2e]">SystemInit</a> from system_lpc17xx.o(.text) referenced from startup_lpc17xx.o(.text)
 <LI><a href="#[b]">TIMER0_IRQHandler</a> from timers.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[c]">TIMER1_IRQHandler</a> from timers.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[d]">TIMER2_IRQHandler</a> from timers.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[e]">TIMER3_IRQHandler</a> from timers.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[f]">UART0_IRQHandler</a> from uart0.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[10]">UART1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[11]">UART2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[12]">UART3_IRQHandler</a> from uart3.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2b]">USBActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[22]">USB_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[a]">WDT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2f]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_lpc17xx.o(.text)
 <LI><a href="#[31]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[32]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[30]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[34]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[35]">http_listener</a> from at_http.o(i.http_listener) referenced from at_http.o(i.http_init)
 <LI><a href="#[33]">isspace</a> from isspace_o.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[2d]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2f]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(.text)
</UL>
<P><STRONG><a name="[192]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[36]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[117]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[193]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[194]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[195]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[196]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[197]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[39]"></a>alimentaWDT</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wdt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUS
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mainLoop__
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configuraWDT__
</UL>

<P><STRONG><a name="[38]"></a>__configuraWDT__</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, wdt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alimentaWDT
</UL>

<P><STRONG><a name="[a0]"></a>__configuraAnemometro__</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, anemometro.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configuraPrograma__
</UL>

<P><STRONG><a name="[3a]"></a>mideAnemometro</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, anemometro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mideAnemometro &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[3e]"></a>__configuraWEB__</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, http_source.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TcpNet
</UL>

<P><STRONG><a name="[40]"></a>__mantenerTCP__</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, http_source.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = __mantenerTCP__ &rArr; main_TcpNet &rArr; run_system &rArr; eth_run_link &rArr; tcp_process &rArr; tcp_send_reset &rArr; tcp_write &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_TcpNet
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d]"></a>main</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = main &rArr; __mantenerTCP__ &rArr; main_TcpNet &rArr; run_system &rArr; eth_run_link &rArr; tcp_process &rArr; tcp_send_reset &rArr; tcp_write &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configuraPrograma__
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mainLoop__
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mantenerTCP__
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOD_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>CANActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>RIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>USBActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>__configuraUVA30A__</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, uva30a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configuraPrograma__
</UL>

<P><STRONG><a name="[44]"></a>__configuraPWM__</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __configuraPWM__ &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configuraPrograma__
</UL>

<P><STRONG><a name="[46]"></a>modificaPulso</STRONG> (Thumb, 240 bytes, Stack size 56 bytes, pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = modificaPulso &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configuraPrograma__
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mainLoop__
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zoneNewPressed
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procesarComando
</UL>

<P><STRONG><a name="[9c]"></a>__configuraRTC__</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __configuraRTC__
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configuraPrograma__
</UL>

<P><STRONG><a name="[1b]"></a>RTC_IRQHandler</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RTC_IRQHandler &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[12b]"></a>sys_error</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_get_socket
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resize_mem
</UL>

<P><STRONG><a name="[4d]"></a>init_system</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, net_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init_link
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TcpNet
</UL>

<P><STRONG><a name="[55]"></a>run_system</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, net_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = run_system &rArr; eth_run_link &rArr; tcp_process &rArr; tcp_send_reset &rArr; tcp_write &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll_sockets
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_run_local
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_run_engine
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_run_server
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_TcpNet
</UL>

<P><STRONG><a name="[175]"></a>igmp_is_member</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chk_frame
</UL>

<P><STRONG><a name="[149]"></a>igmp_process</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
</UL>

<P><STRONG><a name="[198]"></a>dhcp_disable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_config.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>ppp_send_frame</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
</UL>

<P><STRONG><a name="[17a]"></a>slip_send_frame</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
</UL>

<P><STRONG><a name="[199]"></a>sntp_get_time</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>cgi_process_var</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, http_cgi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
</UL>

<P><STRONG><a name="[158]"></a>cgi_process_data</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, http_cgi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_post
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_multipart
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_kill_session
</UL>

<P><STRONG><a name="[5b]"></a>cgi_func</STRONG> (Thumb, 482 bytes, Stack size 32 bytes, http_cgi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cgi_func &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_run_server
</UL>

<P><STRONG><a name="[5e]"></a>int_enable_eth</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, emac_lpc17xx_lan8720.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMac
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init_link
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resize_mem
</UL>

<P><STRONG><a name="[5d]"></a>int_disable_eth</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, emac_lpc17xx_lan8720.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMac
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init_link
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mem
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resize_mem
</UL>

<P><STRONG><a name="[5c]"></a>setMac</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, emac_lpc17xx_lan8720.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_disable_eth
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_enable_eth
</UL>

<P><STRONG><a name="[5f]"></a>init_ethernet</STRONG> (Thumb, 724 bytes, Stack size 8 bytes, emac_lpc17xx_lan8720.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_PHY
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_PHY
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_descr_init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_descr_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init_link
</UL>

<P><STRONG><a name="[13a]"></a>send_frame</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, emac_lpc17xx_lan8720.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = send_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_send_frame
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
</UL>

<P><STRONG><a name="[26]"></a>ENET_IRQHandler</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, emac_lpc17xx_lan8720.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ENET_IRQHandler &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_in_queue
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>zoneNewPressed</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, statechart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = zoneNewPressed &rArr; modificaPulso &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modificaPulso
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mainLoop__
</UL>

<P><STRONG><a name="[67]"></a>squareButton</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, statechart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = squareButton &rArr; GUI_Text &rArr; PutChar &rArr; LCD_SetPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Text
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pintaInicio__
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pintaMedidas1__
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pintaMedidas2__
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pintaAjustes__
</UL>

<P><STRONG><a name="[6b]"></a>__pintaAjustes__</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, statechart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __pintaAjustes__ &rArr; squareButton &rArr; GUI_Text &rArr; PutChar &rArr; LCD_SetPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;squareButton
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mainLoop__
</UL>

<P><STRONG><a name="[6c]"></a>__pintaMedidas2__</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, statechart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __pintaMedidas2__ &rArr; squareButton &rArr; GUI_Text &rArr; PutChar &rArr; LCD_SetPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;squareButton
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mainLoop__
</UL>

<P><STRONG><a name="[6d]"></a>__pintaMedidas1__</STRONG> (Thumb, 692 bytes, Stack size 72 bytes, statechart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __pintaMedidas1__ &rArr; squareButton &rArr; GUI_Text &rArr; PutChar &rArr; LCD_SetPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;squareButton
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mainLoop__
</UL>

<P><STRONG><a name="[6e]"></a>__pintaInicio__</STRONG> (Thumb, 264 bytes, Stack size 8 bytes, statechart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __pintaInicio__ &rArr; squareButton &rArr; GUI_Text &rArr; PutChar &rArr; LCD_SetPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;squareButton
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mainLoop__
</UL>

<P><STRONG><a name="[6f]"></a>checkTouchPanel</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, statechart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = checkTouchPanel &rArr; Read_Ads7846 &rArr; TP_GetAdXY &rArr; Read_Y &rArr; RD_AD &rArr; WR_CMD &rArr; SSP_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDisplayPoint
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Ads7846
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mainLoop__
</UL>

<P><STRONG><a name="[43]"></a>__mainLoop__</STRONG> (Thumb, 1036 bytes, Stack size 16 bytes, statechart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __mainLoop__ &rArr; __pintaMedidas1__ &rArr; squareButton &rArr; GUI_Text &rArr; PutChar &rArr; LCD_SetPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lanzaUFONO
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_LUT
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activarDac
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkTouchPanel
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pintaInicio__
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pintaMedidas1__
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pintaMedidas2__
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pintaAjustes__
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zoneNewPressed
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modificaPulso
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alimentaWDT
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>__configuraLCD__</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, statechart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __configuraLCD__ &rArr; TP_Init &rArr; SSP_Init &rArr; setSSPclock &rArr; CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Initializtion
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configuraPrograma__
</UL>

<P><STRONG><a name="[77]"></a>TP_Init</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, touchpanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TP_Init &rArr; SSP_Init &rArr; setSSPclock &rArr; CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_ConfigStructInit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Cmd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configuraLCD__
</UL>

<P><STRONG><a name="[85]"></a>Read_X</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, touchpanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Read_X &rArr; RD_AD &rArr; WR_CMD &rArr; SSP_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RD_AD
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WR_CMD
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_GetAdXY
</UL>

<P><STRONG><a name="[86]"></a>Read_Y</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, touchpanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Read_Y &rArr; RD_AD &rArr; WR_CMD &rArr; SSP_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RD_AD
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WR_CMD
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_GetAdXY
</UL>

<P><STRONG><a name="[87]"></a>TP_GetAdXY</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, touchpanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TP_GetAdXY &rArr; Read_Y &rArr; RD_AD &rArr; WR_CMD &rArr; SSP_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Y
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_X
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Ads7846
</UL>

<P><STRONG><a name="[88]"></a>TP_DrawPoint</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, touchpanel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPoint
</UL>

<P><STRONG><a name="[8a]"></a>DrawCross</STRONG> (Thumb, 356 bytes, Stack size 24 bytes, touchpanel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPanel_Calibrate
</UL>

<P><STRONG><a name="[70]"></a>Read_Ads7846</STRONG> (Thumb, 520 bytes, Stack size 112 bytes, touchpanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Read_Ads7846 &rArr; TP_GetAdXY &rArr; Read_Y &rArr; RD_AD &rArr; WR_CMD &rArr; SSP_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_GetAdXY
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPanel_Calibrate
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkTouchPanel
</UL>

<P><STRONG><a name="[8c]"></a>setCalibrationMatrix</STRONG> (Thumb, 356 bytes, Stack size 32 bytes, touchpanel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPanel_Calibrate
</UL>

<P><STRONG><a name="[71]"></a>getDisplayPoint</STRONG> (Thumb, 238 bytes, Stack size 80 bytes, touchpanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = getDisplayPoint &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkTouchPanel
</UL>

<P><STRONG><a name="[93]"></a>TouchPanel_Calibrate</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, touchpanel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCalibrationMatrix
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawCross
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUS
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Ads7846
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Text
</UL>

<P><STRONG><a name="[94]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 424 bytes, Stack size 32 bytes, system_lpc17xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[2e]"></a>SystemInit</STRONG> (Thumb, 290 bytes, Stack size 0 bytes, system_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(.text)
</UL>
<P><STRONG><a name="[96]"></a>__iniciaVariables__</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, configura.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configuraPrograma__
</UL>

<P><STRONG><a name="[42]"></a>__configuraPrograma__</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, configura.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __configuraPrograma__ &rArr; modificaPulso &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configuraUVA30A__
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configuraUFONO__
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configuraTimer0__
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configuraSysTick__
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configuraOW__
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configuraLDR__
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configuraI2C__
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configuraDMA__
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configuraDAC__
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__iniciaVariables__
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configuraLCD__
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configuraRTC__
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modificaPulso
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configuraPWM__
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configuraAnemometro__
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[97]"></a>__configuraSysTick__</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __configuraSysTick__ &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configuraPrograma__
</UL>

<P><STRONG><a name="[98]"></a>__configuraTimer0__</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __configuraTimer0__ &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configuraPrograma__
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SysTick_Handler &rArr; modificaPulso &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_tick
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modificaPulso
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = TIMER0_IRQHandler &rArr; _subAnemoTempe &rArr; medirBMP &rArr; procesarDato &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_subBurst
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_subAnemoTempe
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modificaPulso
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIMER1_IRQHandler &rArr; mideAnemometro &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;desactivarDAC
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mideAnemometro
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timers.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timers.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>reiniciaCuenta</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, onewirev2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configuraOW__
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delayUS
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compruebaRespuesta
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leerByte
</UL>

<P><STRONG><a name="[ab]"></a>inicializaT3</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, onewirev2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configuraOW__
</UL>

<P><STRONG><a name="[9f]"></a>__configuraOW__</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, onewirev2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __configuraOW__
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inicializaT3
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reiniciaCuenta
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configuraPrograma__
</UL>

<P><STRONG><a name="[ad]"></a>leerByte</STRONG> (Thumb, 164 bytes, Stack size 12 bytes, onewirev2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = leerByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reiniciaCuenta
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mideTemperatura
</UL>

<P><STRONG><a name="[ae]"></a>compruebaRespuesta</STRONG> (Thumb, 188 bytes, Stack size 4 bytes, onewirev2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = compruebaRespuesta
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reiniciaCuenta
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mideTemperatura
</UL>

<P><STRONG><a name="[af]"></a>_delayUS</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, onewirev2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _delayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reiniciaCuenta
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mideTemperatura
</UL>

<P><STRONG><a name="[a7]"></a>mideTemperatura</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, onewirev2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mideTemperatura &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delayUS
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compruebaRespuesta
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leerByte
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_subAnemoTempe
</UL>

<P><STRONG><a name="[99]"></a>__configuraLDR__</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, ldr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configuraPrograma__
</UL>

<P><STRONG><a name="[20]"></a>ADC_IRQHandler</STRONG> (Thumb, 292 bytes, Stack size 48 bytes, ldr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ADC_IRQHandler &rArr; goto_LUT &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_LUT
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recuperaContexto
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>__configuraUFONO__</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, ufono.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configuraPrograma__
</UL>

<P><STRONG><a name="[75]"></a>lanzaUFONO</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, ufono.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mainLoop__
</UL>

<P><STRONG><a name="[b1]"></a>recuperaContexto</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, ufono.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[9e]"></a>__configuraDAC__</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, dac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configuraPrograma__
</UL>

<P><STRONG><a name="[19a]"></a>escribirEnDac</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, dac.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>activarDac</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, dac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mainLoop__
</UL>

<P><STRONG><a name="[aa]"></a>desactivarDAC</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, dac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[72]"></a>goto_LUT</STRONG> (Thumb, 220 bytes, Stack size 48 bytes, lut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = goto_LUT &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mainLoop__
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[b3]"></a>crearSeno</STRONG> (Thumb, 116 bytes, Stack size 64 bytes, lut.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[9d]"></a>__configuraDMA__</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configuraPrograma__
</UL>

<P><STRONG><a name="[7d]"></a>SSP_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lpc17xx_ssp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SSP_Init &rArr; setSSPclock &rArr; CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSSPclock
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
</UL>

<P><STRONG><a name="[b9]"></a>SSP_DeInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lpc17xx_ssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
</UL>

<P><STRONG><a name="[ba]"></a>SSP_GetDataSize</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lpc17xx_ssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_ReadWrite
</UL>

<P><STRONG><a name="[7c]"></a>SSP_ConfigStructInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lpc17xx_ssp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
</UL>

<P><STRONG><a name="[7e]"></a>SSP_Cmd</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lpc17xx_ssp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SSP_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
</UL>

<P><STRONG><a name="[bb]"></a>SSP_LoopBackCmd</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lpc17xx_ssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[bc]"></a>SSP_SlaveOutputCmd</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lpc17xx_ssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[82]"></a>SSP_SendData</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lpc17xx_ssp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SSP_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WR_CMD
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_ReadWrite
</UL>

<P><STRONG><a name="[83]"></a>SSP_ReceiveData</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lpc17xx_ssp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SSP_ReceiveData
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WR_CMD
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_ReadWrite
</UL>

<P><STRONG><a name="[bd]"></a>SSP_ReadWrite</STRONG> (Thumb, 604 bytes, Stack size 56 bytes, lpc17xx_ssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_SendData
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_ReceiveData
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_GetDataSize
</UL>

<P><STRONG><a name="[81]"></a>SSP_GetStatus</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lpc17xx_ssp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SSP_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WR_CMD
</UL>

<P><STRONG><a name="[be]"></a>SSP_IntConfig</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lpc17xx_ssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[bf]"></a>SSP_GetRawIntStatus</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lpc17xx_ssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[c0]"></a>SSP_GetRawIntStatusReg</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lpc17xx_ssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[c1]"></a>SSP_GetIntStatus</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lpc17xx_ssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[c2]"></a>SSP_ClearIntPending</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lpc17xx_ssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[c3]"></a>SSP_DMACmd</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lpc17xx_ssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[19b]"></a>PINSEL_ConfigTraceFunc</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lpc17xx_pinsel.o(.text), UNUSED)

<P><STRONG><a name="[19c]"></a>PINSEL_SetI2C0Pins</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc17xx_pinsel.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>PINSEL_ConfigPin</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lpc17xx_pinsel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = PINSEL_ConfigPin &rArr; set_ResistorMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_OpenDrainMode
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ResistorMode
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PinFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
</UL>

<P><STRONG><a name="[7a]"></a>GPIO_SetDir</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_SetDir
</UL>

<P><STRONG><a name="[7b]"></a>GPIO_SetValue</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_SetValue
</UL>

<P><STRONG><a name="[c8]"></a>GPIO_ClearValue</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ClearValue
</UL>

<P><STRONG><a name="[c9]"></a>GPIO_ReadValue</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ReadValue
</UL>

<P><STRONG><a name="[cf]"></a>GPIO_IntCmd</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_IntCmd
</UL>

<P><STRONG><a name="[d1]"></a>GPIO_GetIntStatus</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_GetIntStatus
</UL>

<P><STRONG><a name="[d3]"></a>GPIO_ClearInt</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ClearInt
</UL>

<P><STRONG><a name="[ca]"></a>FIO_SetDir</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
</UL>

<P><STRONG><a name="[cb]"></a>FIO_SetValue</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>

<P><STRONG><a name="[cc]"></a>FIO_ClearValue</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>

<P><STRONG><a name="[cd]"></a>FIO_ReadValue</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
</UL>

<P><STRONG><a name="[ce]"></a>FIO_IntCmd</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IntCmd
</UL>

<P><STRONG><a name="[d0]"></a>FIO_GetIntStatus</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetIntStatus
</UL>

<P><STRONG><a name="[d2]"></a>FIO_ClearInt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearInt
</UL>

<P><STRONG><a name="[d4]"></a>FIO_SetMask</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>

<P><STRONG><a name="[d5]"></a>FIO_HalfWordSetDir</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordGetPointer
</UL>

<P><STRONG><a name="[d7]"></a>FIO_HalfWordSetMask</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordGetPointer
</UL>

<P><STRONG><a name="[d8]"></a>FIO_HalfWordSetValue</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordGetPointer
</UL>

<P><STRONG><a name="[d9]"></a>FIO_HalfWordClearValue</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordGetPointer
</UL>

<P><STRONG><a name="[da]"></a>FIO_HalfWordReadValue</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordGetPointer
</UL>

<P><STRONG><a name="[db]"></a>FIO_ByteSetDir</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteGetPointer
</UL>

<P><STRONG><a name="[dd]"></a>FIO_ByteSetMask</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteGetPointer
</UL>

<P><STRONG><a name="[de]"></a>FIO_ByteSetValue</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteGetPointer
</UL>

<P><STRONG><a name="[df]"></a>FIO_ByteClearValue</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteGetPointer
</UL>

<P><STRONG><a name="[e0]"></a>FIO_ByteReadValue</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteGetPointer
</UL>

<P><STRONG><a name="[19d]"></a>CLKPWR_SetPCLKDiv</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, lpc17xx_clkpwr.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>CLKPWR_GetPCLKSEL</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lpc17xx_clkpwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetPCLK
</UL>

<P><STRONG><a name="[b7]"></a>CLKPWR_GetPCLK</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lpc17xx_clkpwr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetPCLKSEL
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSSPclock
</UL>

<P><STRONG><a name="[b8]"></a>CLKPWR_ConfigPPWR</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, lpc17xx_clkpwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_DeInit
</UL>

<P><STRONG><a name="[19e]"></a>CLKPWR_Sleep</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lpc17xx_clkpwr.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>CLKPWR_DeepSleep</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc17xx_clkpwr.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>CLKPWR_PowerDown</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc17xx_clkpwr.o(.text), UNUSED)

<P><STRONG><a name="[1a1]"></a>CLKPWR_DeepPowerDown</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc17xx_clkpwr.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>check_failed</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lpc17xx_libcfg_default.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_SendData
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_ReceiveData
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_GetStatus
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Cmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_DMACmd
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_ClearIntPending
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_GetIntStatus
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_GetRawIntStatusReg
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_GetRawIntStatus
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_IntConfig
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_SlaveOutputCmd
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_LoopBackCmd
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_GetDataSize
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_DeInit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSSPclock
</UL>

<P><STRONG><a name="[e2]"></a>GetASCIICode</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, asciilib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetASCIICode
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutChar
</UL>

<P><STRONG><a name="[78]"></a>LCD_Initializtion</STRONG> (Thumb, 63088 bytes, Stack size 32 bytes, glcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_Initializtion
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configuraLCD__
</UL>

<P><STRONG><a name="[73]"></a>LCD_Clear</STRONG> (Thumb, 2744 bytes, Stack size 40 bytes, glcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configuraPrograma__
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPanel_Calibrate
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mainLoop__
</UL>

<P><STRONG><a name="[e6]"></a>LCD_GetPoint</STRONG> (Thumb, 2218 bytes, Stack size 32 bytes, glcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BGR2RGB
</UL>

<P><STRONG><a name="[89]"></a>LCD_SetPoint</STRONG> (Thumb, 1304 bytes, Stack size 24 bytes, glcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_SetPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_DrawPoint
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutChar
</UL>

<P><STRONG><a name="[68]"></a>LCD_DrawLine</STRONG> (Thumb, 250 bytes, Stack size 36 bytes, glcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LCD_DrawLine &rArr; LCD_SetPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawCross
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;squareButton
</UL>

<P><STRONG><a name="[e8]"></a>PutChar</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, glcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PutChar &rArr; LCD_SetPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPoint
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetASCIICode
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Text
</UL>

<P><STRONG><a name="[6a]"></a>GUI_Text</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, glcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GUI_Text &rArr; PutChar &rArr; LCD_SetPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPanel_Calibrate
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;squareButton
</UL>

<P><STRONG><a name="[eb]"></a>UART0_MandaBufferTx</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, uart0.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procesarComando
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configuraUART0__
</UL>

<P><STRONG><a name="[e9]"></a>__configuraUART0__</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, uart0.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_MandaBufferTx
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>

<P><STRONG><a name="[ec]"></a>procesarComando</STRONG> (Thumb, 350 bytes, Stack size 24 bytes, uart0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = procesarComando &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modificaPulso
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_MandaBufferTx
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__recibirDatos
</UL>

<P><STRONG><a name="[f]"></a>UART0_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, uart0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = UART0_IRQHandler &rArr; __recibirDatos &rArr; procesarComando &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__transmitirDatos
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__recibirDatos
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ignore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1a2]"></a>__configuraUART3__</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, uart3.o(.text), UNUSED)

<P><STRONG><a name="[1a3]"></a>UART3_MandaBufferTx</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, uart3.o(.text), UNUSED)

<P><STRONG><a name="[12]"></a>UART3_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, uart3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__transmitirDatos
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__recibirDatos
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ignore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[f5]"></a>__calibraBMP</STRONG> (Thumb, 630 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __calibraBMP &rArr; I2CSendAddr &rArr; I2CSendByte &rArr; pulso_SCL
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CSendStop
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CSendByte
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CSendAddr
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CGetByte
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configuraI2C__
</UL>

<P><STRONG><a name="[a1]"></a>__configuraI2C__</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __configuraI2C__ &rArr; __calibraBMP &rArr; I2CSendAddr &rArr; I2CSendByte &rArr; pulso_SCL
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__calibraBMP
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configuraPrograma__
</UL>

<P><STRONG><a name="[fa]"></a>procesarDato</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = procesarDato &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;medirBMP
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pedirDatoReg
</UL>

<P><STRONG><a name="[fc]"></a>pedirDato</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CSendStop
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CSendAddr
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CGetByte
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pedirDatoReg
</UL>

<P><STRONG><a name="[fd]"></a>irRegistro</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CSendByte
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CSendAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pedirDatoReg
</UL>

<P><STRONG><a name="[fe]"></a>pedirDatoReg</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irRegistro
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pedirDato
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procesarDato
</UL>

<P><STRONG><a name="[ff]"></a>obtenerDato</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = obtenerDato &rArr; I2CSendAddr &rArr; I2CSendByte &rArr; pulso_SCL
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CSendStop
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CSendByte
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CSendAddr
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CGetByte
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;medirBMP
</UL>

<P><STRONG><a name="[100]"></a>mandaDato</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mandaDato &rArr; I2CSendAddr &rArr; I2CSendByte &rArr; pulso_SCL
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CSendStop
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CSendByte
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CSendAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;medirBMP
</UL>

<P><STRONG><a name="[a8]"></a>medirBMP</STRONG> (Thumb, 402 bytes, Stack size 64 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = medirBMP &rArr; procesarDato &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdelay
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mandaDato
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obtenerDato
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procesarDato
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_subAnemoTempe
</UL>

<P><STRONG><a name="[101]"></a>I2Cdelay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i2clib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;medirBMP
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pulso_SCL
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CSendStop
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CSendAddr
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CGetByte
</UL>

<P><STRONG><a name="[102]"></a>pulso_SCL</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, i2clib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = pulso_SCL
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdelay
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CSendByte
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CGetByte
</UL>

<P><STRONG><a name="[f7]"></a>I2CSendByte</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, i2clib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2CSendByte &rArr; pulso_SCL
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pulso_SCL
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CSendAddr
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mandaDato
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obtenerDato
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irRegistro
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__calibraBMP
</UL>

<P><STRONG><a name="[f6]"></a>I2CSendAddr</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, i2clib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2CSendAddr &rArr; I2CSendByte &rArr; pulso_SCL
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdelay
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CSendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mandaDato
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obtenerDato
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irRegistro
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pedirDato
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__calibraBMP
</UL>

<P><STRONG><a name="[f8]"></a>I2CGetByte</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, i2clib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2CGetByte &rArr; pulso_SCL
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pulso_SCL
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdelay
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obtenerDato
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pedirDato
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__calibraBMP
</UL>

<P><STRONG><a name="[f9]"></a>I2CSendStop</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, i2clib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2CSendStop
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdelay
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mandaDato
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obtenerDato
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pedirDato
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__calibraBMP
</UL>

<P><STRONG><a name="[95]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[e3]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetASCIICode
</UL>

<P><STRONG><a name="[1a4]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[1a5]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1a6]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1a7]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[8b]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Ads7846
</UL>

<P><STRONG><a name="[1a8]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[69]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;squareButton
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_script_line
</UL>

<P><STRONG><a name="[ed]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procesarComando
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_header
</UL>

<P><STRONG><a name="[ea]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procesarComando
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configuraUART0__
</UL>

<P><STRONG><a name="[ee]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procesarComando
</UL>

<P><STRONG><a name="[118]"></a>_scanf_string</STRONG> (Thumb, 218 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[109]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_to_utc
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_post_req
</UL>

<P><STRONG><a name="[4b]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modificaPulso
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[4a]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_LUT
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modificaPulso
</UL>

<P><STRONG><a name="[10e]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[3c]"></a>__aeabi_fmul</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_subAnemoTempe
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_LUT
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modificaPulso
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mideAnemometro
</UL>

<P><STRONG><a name="[3d]"></a>__aeabi_fdiv</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;medirBMP
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_subBurst
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_subAnemoTempe
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_LUT
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modificaPulso
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configuraPWM__
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mideAnemometro
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procesarDato
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[90]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_LUT
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDisplayPoint
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crearSeno
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[112]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[b0]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procesarDato
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[48]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_LUT
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDisplayPoint
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modificaPulso
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procesarDato
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crearSeno
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[91]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mideTemperatura
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDisplayPoint
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crearSeno
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[a5]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;medirBMP
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_subBurst
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_subAnemoTempe
</UL>

<P><STRONG><a name="[3b]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_LUT
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modificaPulso
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mideAnemometro
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[8d]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCalibrationMatrix
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crearSeno
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[8f]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mideTemperatura
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDisplayPoint
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[45]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_LUT
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modificaPulso
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configuraPWM__
</UL>

<P><STRONG><a name="[92]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDisplayPoint
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crearSeno
</UL>

<P><STRONG><a name="[47]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_LUT
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pintaMedidas1__
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pintaMedidas2__
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_func
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modificaPulso
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procesarDato
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCalibrationMatrix
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDisplayPoint
</UL>

<P><STRONG><a name="[1a9]"></a>__aeabi_cdcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mideTemperatura
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_LUT
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modificaPulso
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procesarDato
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[a6]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_subBurst
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_subAnemoTempe
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_LUT
</UL>

<P><STRONG><a name="[1aa]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[104]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[1ab]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[1ac]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1ad]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[30]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[31]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[10b]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[1ae]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>

<P><STRONG><a name="[10c]"></a>_float_epilogue</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[111]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[110]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[11f]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[1af]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[126]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[37]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1b0]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[33]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[113]"></a>__vfscanf</STRONG> (Thumb, 806 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[115]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[11a]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[11b]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[119]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[1b1]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1b2]"></a>__decompress1</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1b3]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[4c]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pintaMedidas1__
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pintaMedidas2__
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pintaAjustes__
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_func
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utc_to_http
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_error_msg
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_add_header
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_server_id
</UL>

<P><STRONG><a name="[1b4]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1b5]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[123]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[10a]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[1b6]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[11e]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 832 bytes, Stack size 136 bytes, rred.o(i.__ieee754_rem_pio2), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[120]"></a>__kernel_cos</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, cos_i.o(i.__kernel_cos), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[121]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[122]"></a>__kernel_sin</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, sin_i.o(i.__kernel_sin), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[124]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[1b7]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1b8]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1b9]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[17d]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[64]"></a>alloc_mem</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, at_mem.o(i.alloc_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_disable_eth
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_enable_eth
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_IRQHandler
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_get_buf
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_message
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_process
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_post
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_post_req
</UL>

<P><STRONG><a name="[12c]"></a>arp_cache_add</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, at_arp.o(i.arp_cache_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = arp_cache_add &rArr; arp_cache_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrd_u32be
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_is_cacheable
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_process
</UL>

<P><STRONG><a name="[133]"></a>arp_cache_early</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, at_arp.o(i.arp_cache_early))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = arp_cache_early &rArr; arp_send_request &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_is_cacheable
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
</UL>

<P><STRONG><a name="[135]"></a>arp_cache_find</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, at_arp.o(i.arp_cache_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = arp_cache_find &rArr; arp_send_request &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrd_u32be
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_send_frame
</UL>

<P><STRONG><a name="[136]"></a>arp_cache_update</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, at_arp.o(i.arp_cache_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = arp_cache_update &rArr; arp_send_request &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrd_u32be
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
</UL>

<P><STRONG><a name="[145]"></a>arp_init</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, at_arp.o(i.arp_init), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init_link
</UL>

<P><STRONG><a name="[54]"></a>arp_notify</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, at_arp.o(i.arp_notify), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_system
</UL>

<P><STRONG><a name="[138]"></a>arp_process</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, at_arp.o(i.arp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = arp_process &rArr; arp_send_reply &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrd_u32be
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_add
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_proc_response
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
</UL>

<P><STRONG><a name="[16b]"></a>avail_mem</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at_mem.o(i.avail_mem))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll_sockets
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_run_server
</UL>

<P><STRONG><a name="[165]"></a>b64_to_asc</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, at_lib.o(i.b64_to_asc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = b64_to_asc
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_header
</UL>

<P><STRONG><a name="[13c]"></a>calc_chksum16be</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, at_lib.o(i.calc_chksum16be))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = calc_chksum16be
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum16_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_message
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_process
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_chksum
</UL>

<P><STRONG><a name="[150]"></a>cgx_content_type</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at_http.o(i.cgx_content_type))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_add_header
</UL>

<P><STRONG><a name="[13d]"></a>chksum16_buf</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, at_lib.o(i.chksum16_buf))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_process
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_chksum16be
</UL>

<P><STRONG><a name="[18a]"></a>chksum16_val</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at_lib.o(i.chksum16_val))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_process
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[144]"></a>eth_chk_adr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at_ethernet.o(i.eth_chk_adr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eth_chk_adr &rArr; mem_comp
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chk_frame
</UL>

<P><STRONG><a name="[4e]"></a>eth_init_link</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, at_ethernet.o(i.eth_init_link), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ethernet
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_disable_eth
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_enable_eth
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_system
</UL>

<P><STRONG><a name="[56]"></a>eth_run_link</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, at_ethernet.o(i.eth_run_link))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = eth_run_link &rArr; tcp_process &rArr; tcp_send_reset &rArr; tcp_write &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_process
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_process
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_process
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chk_frame
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrd_u32be
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_process
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_update
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_early
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_add
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_system
</UL>

<P><STRONG><a name="[14c]"></a>eth_send_frame</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, at_ethernet.o(i.eth_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_frame
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrd_u32be
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_find
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
</UL>

<P><STRONG><a name="[13b]"></a>free_mem</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, at_mem.o(i.free_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = free_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_disable_eth
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_enable_eth
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_run_local
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_free
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_proc_acknr
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_message
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_process
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_post
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_kill_session
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send
</UL>

<P><STRONG><a name="[18c]"></a>get_rnd32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at_system.o(i.get_rnd32))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[159]"></a>http_accept_host</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at_http.o(i.http_accept_host))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
</UL>

<P><STRONG><a name="[167]"></a>http_check_account</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at_http.o(i.http_check_account))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_header
</UL>

<P><STRONG><a name="[157]"></a>http_fclose</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at_http_uif.o(i.http_fclose))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_run_server
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_kill_session
</UL>

<P><STRONG><a name="[180]"></a>http_fgets</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at_http_uif.o(i.http_fgets))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_script_line
</UL>

<P><STRONG><a name="[161]"></a>http_file_access</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at_http.o(i.http_file_access))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_open_file
</UL>

<P><STRONG><a name="[163]"></a>http_finfo</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at_http_uif.o(i.http_finfo))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_open_file
</UL>

<P><STRONG><a name="[162]"></a>http_fopen</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at_http_uif.o(i.http_fopen))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_open_file
</UL>

<P><STRONG><a name="[16f]"></a>http_fread</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at_http_uif.o(i.http_fread))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_run_server
</UL>

<P><STRONG><a name="[53]"></a>http_init</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, at_http.o(i.http_init), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_system
</UL>

<P><STRONG><a name="[5a]"></a>http_run_server</STRONG> (Thumb, 816 bytes, Stack size 40 bytes, at_http.o(i.http_run_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = http_run_server &rArr; tcp_close &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_func
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_max_dsize
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_get_state
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_get_buf
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fread
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fclose
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_script_line
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_strcpy
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_open_file
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_kill_session
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_error_msg
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_add_header
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avail_mem
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_system
</UL>

<P><STRONG><a name="[50]"></a>icmp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at_icmp.o(i.icmp_init), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_system
</UL>

<P><STRONG><a name="[148]"></a>icmp_process</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, at_icmp.o(i.icmp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = icmp_process &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_chksum16be
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_run_local
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
</UL>

<P><STRONG><a name="[58]"></a>icmp_run_engine</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, at_icmp.o(i.icmp_run_engine))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = icmp_run_engine &rArr; icmp_send_message &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_message
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_system
</UL>

<P><STRONG><a name="[17f]"></a>ifree_mem</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, at_mem.o(i.ifree_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ifree_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_in_queue
</UL>

<P><STRONG><a name="[3f]"></a>init_TcpNet</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, at_system.o(i.init_TcpNet), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_system
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configuraWEB__
</UL>

<P><STRONG><a name="[174]"></a>init_mem</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, at_mem.o(i.init_mem), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_disable_eth
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TcpNet
</UL>

<P><STRONG><a name="[147]"></a>ip_chk_frame</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, at_ip.o(i.ip_chk_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ip_chk_frame &rArr; eth_chk_adr &rArr; mem_comp
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_is_member
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_chk_adr
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_chksum
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_run_local
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
</UL>

<P><STRONG><a name="[177]"></a>ip_get_locadr</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, at_ip.o(i.ip_get_locadr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ip_get_locadr &rArr; mem_comp
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_test
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
</UL>

<P><STRONG><a name="[4f]"></a>ip_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, at_ip.o(i.ip_init), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_system
</UL>

<P><STRONG><a name="[57]"></a>ip_run_local</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, at_ip.o(i.ip_run_local))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ip_run_local &rArr; tcp_process &rArr; tcp_send_reset &rArr; tcp_write &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_process
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_process
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chk_frame
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_system
</UL>

<P><STRONG><a name="[172]"></a>ip_send_frame</STRONG> (Thumb, 328 bytes, Stack size 32 bytes, at_ip.o(i.ip_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slip_send_frame
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_send_frame
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_send_frame
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_locadr
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_chksum
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_message
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_process
</UL>

<P><STRONG><a name="[12f]"></a>is_subnet</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, at_lib.o(i.is_subnet))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_locadr
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_find
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_early
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_add
</UL>

<P><STRONG><a name="[41]"></a>main_TcpNet</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, at_system.o(i.main_TcpNet))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = main_TcpNet &rArr; run_system &rArr; eth_run_link &rArr; tcp_process &rArr; tcp_send_reset &rArr; tcp_write &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_system
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mantenerTCP__
</UL>

<P><STRONG><a name="[12e]"></a>mem_comp</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, at_lib.o(i.mem_comp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_map_socket
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_process
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_send_frame
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_chk_adr
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_locadr
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chk_frame
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_process
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_update
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_find
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_early
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_add
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_proc_response
</UL>

<P><STRONG><a name="[132]"></a>mem_copy</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, at_lib.o(i.mem_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_run_server
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TcpNet
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_map_socket
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_process
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_send_frame
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_process
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_find
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_early
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_add
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_proc_response
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_post
</UL>

<P><STRONG><a name="[146]"></a>mem_crc32</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, at_lib.o(i.mem_crc32), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init_link
</UL>

<P><STRONG><a name="[17c]"></a>mem_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at_lib.o(i.mem_set))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>

<P><STRONG><a name="[178]"></a>mem_test</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, at_lib.o(i.mem_test))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_locadr
</UL>

<P><STRONG><a name="[130]"></a>nrd_u32be</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at_lib.o(i.nrd_u32be))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_send_frame
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_process
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_update
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_find
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_add
</UL>

<P><STRONG><a name="[191]"></a>nwr_u32be</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at_lib.o(i.nwr_u32be))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[fb]"></a>pow</STRONG> (Thumb, 2510 bytes, Stack size 112 bytes, pow.o(i.pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procesarDato
</UL>

<P><STRONG><a name="[65]"></a>put_in_queue</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, at_ethernet.o(i.put_in_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = put_in_queue &rArr; ifree_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifree_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_IRQHandler
</UL>

<P><STRONG><a name="[181]"></a>resize_mem</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, at_mem.o(i.resize_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = resize_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_disable_eth
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_enable_eth
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send
</UL>

<P><STRONG><a name="[b4]"></a>sin</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, sin.o(i.sin), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crearSeno
</UL>

<P><STRONG><a name="[17e]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[151]"></a>str_copy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at_lib.o(i.str_copy))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_error_msg
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_add_header
</UL>

<P><STRONG><a name="[164]"></a>str_crc32</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, at_lib.o(i.str_crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = str_crc32 &rArr; get_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_open_file
</UL>

<P><STRONG><a name="[166]"></a>str_pos</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at_lib.o(i.str_pos))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_header
</UL>

<P><STRONG><a name="[140]"></a>str_scomp</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, at_lib.o(i.str_scomp))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_delim
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_to_utc
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_multipart
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_post_req
</UL>

<P><STRONG><a name="[171]"></a>tcp_abort</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, at_tcp.o(i.tcp_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tcp_abort &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_run_server
</UL>

<P><STRONG><a name="[16c]"></a>tcp_close</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, at_tcp.o(i.tcp_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tcp_close &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_run_server
</UL>

<P><STRONG><a name="[16e]"></a>tcp_get_buf</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, at_tcp.o(i.tcp_get_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_get_buf &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_run_server
</UL>

<P><STRONG><a name="[154]"></a>tcp_get_socket</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, at_tcp.o(i.tcp_get_socket), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_init
</UL>

<P><STRONG><a name="[16a]"></a>tcp_get_state</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, at_tcp.o(i.tcp_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_run_server
</UL>

<P><STRONG><a name="[52]"></a>tcp_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at_tcp.o(i.tcp_init), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_system
</UL>

<P><STRONG><a name="[155]"></a>tcp_listen</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, at_tcp.o(i.tcp_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcp_listen
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_run_server
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_init
</UL>

<P><STRONG><a name="[16d]"></a>tcp_max_dsize</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, at_tcp.o(i.tcp_max_dsize))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_run_server
</UL>

<P><STRONG><a name="[59]"></a>tcp_poll_sockets</STRONG> (Thumb, 630 bytes, Stack size 32 bytes, at_tcp.o(i.tcp_poll_sockets))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = tcp_poll_sockets &rArr; tcp_que_resend &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_resend
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_free
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avail_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_system
</UL>

<P><STRONG><a name="[14b]"></a>tcp_process</STRONG> (Thumb, 1164 bytes, Stack size 40 bytes, at_tcp.o(i.tcp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = tcp_process &rArr; tcp_send_reset &rArr; tcp_write &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_error
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_cwnd
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_proc_dupack
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_proc_acknr
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parse_opt
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_map_socket
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rnd32
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrd_u32be
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum16_val
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum16_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_run_local
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
</UL>

<P><STRONG><a name="[170]"></a>tcp_send</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, at_tcp.o(i.tcp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tcp_send &rArr; tcp_send_data &rArr; tcp_write &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_data
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resize_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_run_server
</UL>

<P><STRONG><a name="[a3]"></a>timer_tick</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at_system.o(i.timer_tick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[51]"></a>udp_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at_udp.o(i.udp_init), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_system
</UL>

<P><STRONG><a name="[14a]"></a>udp_process</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, at_udp.o(i.udp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = udp_process
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum16_val
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum16_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_run_local
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[63]"></a>tx_descr_init</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, emac_lpc17xx_lan8720.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ethernet
</UL>

<P><STRONG><a name="[62]"></a>rx_descr_init</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, emac_lpc17xx_lan8720.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ethernet
</UL>

<P><STRONG><a name="[61]"></a>read_PHY</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, emac_lpc17xx_lan8720.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ethernet
</UL>

<P><STRONG><a name="[60]"></a>write_PHY</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, emac_lpc17xx_lan8720.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ethernet
</UL>

<P><STRONG><a name="[7f]"></a>DelayUS</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, touchpanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alimentaWDT
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPanel_Calibrate
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_GetAdXY
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Y
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_X
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RD_AD
</UL>

<P><STRONG><a name="[80]"></a>WR_CMD</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, touchpanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WR_CMD &rArr; SSP_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_SendData
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_ReceiveData
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Y
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_X
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RD_AD
</UL>

<P><STRONG><a name="[84]"></a>RD_AD</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, touchpanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RD_AD &rArr; WR_CMD &rArr; SSP_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WR_CMD
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Y
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_X
</UL>

<P><STRONG><a name="[a2]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configuraTimer0__
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__configuraSysTick__
</UL>

<P><STRONG><a name="[a4]"></a>_subAnemoTempe</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = _subAnemoTempe &rArr; medirBMP &rArr; procesarDato &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mideTemperatura
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;medirBMP
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[a9]"></a>_subBurst</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _subBurst &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[b5]"></a>setSSPclock</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, lpc17xx_ssp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = setSSPclock &rArr; CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetPCLK
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init
</UL>

<P><STRONG><a name="[c4]"></a>set_PinFunc</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, lpc17xx_pinsel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = set_PinFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
</UL>

<P><STRONG><a name="[c5]"></a>set_ResistorMode</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, lpc17xx_pinsel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = set_ResistorMode
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
</UL>

<P><STRONG><a name="[c6]"></a>set_OpenDrainMode</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, lpc17xx_pinsel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = set_OpenDrainMode
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
</UL>

<P><STRONG><a name="[c7]"></a>GPIO_GetPointer</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lpc17xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_SetMask
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>

<P><STRONG><a name="[d6]"></a>FIO_HalfWordGetPointer</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordReadValue
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordClearValue
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordSetValue
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordSetMask
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordSetDir
</UL>

<P><STRONG><a name="[dc]"></a>FIO_ByteGetPointer</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteReadValue
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteClearValue
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteSetValue
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteSetMask
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteSetDir
</UL>

<P><STRONG><a name="[e4]"></a>LCD_Configuration</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, glcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Initializtion
</UL>

<P><STRONG><a name="[e5]"></a>delay_ms</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, glcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Initializtion
</UL>

<P><STRONG><a name="[e7]"></a>LCD_BGR2RGB</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, glcd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPoint
</UL>

<P><STRONG><a name="[f0]"></a>__ignore</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uart0.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[ef]"></a>__recibirDatos</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, uart0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = __recibirDatos &rArr; procesarComando &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procesarComando
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[f1]"></a>__transmitirDatos</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, uart0.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[f3]"></a>__ignore</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uart3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
</UL>

<P><STRONG><a name="[f2]"></a>__recibirDatos</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, uart3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
</UL>

<P><STRONG><a name="[f4]"></a>__transmitirDatos</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, uart3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
</UL>

<P><STRONG><a name="[131]"></a>arp_cache_alloc</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, at_arp.o(i.arp_cache_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = arp_cache_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_find
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_early
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_add
</UL>

<P><STRONG><a name="[12d]"></a>arp_is_cacheable</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, at_arp.o(i.arp_is_cacheable))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_early
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_add
</UL>

<P><STRONG><a name="[137]"></a>arp_proc_response</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, at_arp.o(i.arp_proc_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = arp_proc_response &rArr; mem_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_process
</UL>

<P><STRONG><a name="[139]"></a>arp_send_reply</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, at_arp.o(i.arp_send_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = arp_send_reply &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_frame
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_process
</UL>

<P><STRONG><a name="[134]"></a>arp_send_request</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, at_arp.o(i.arp_send_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = arp_send_request &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_frame
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_notify
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_update
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_find
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_early
</UL>

<P><STRONG><a name="[176]"></a>ip_get_chksum</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at_ip.o(i.ip_get_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ip_get_chksum &rArr; calc_chksum16be
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_chksum16be
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chk_frame
</UL>

<P><STRONG><a name="[173]"></a>icmp_send_message</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, at_icmp.o(i.icmp_send_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = icmp_send_message &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_chksum16be
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_run_engine
</UL>

<P><STRONG><a name="[184]"></a>tcp_map_socket</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, at_tcp.o(i.tcp_map_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_map_socket &rArr; mem_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[18b]"></a>tcp_parse_opt</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, at_tcp.o(i.tcp_parse_opt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tcp_parse_opt
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[188]"></a>tcp_proc_acknr</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, at_tcp.o(i.tcp_proc_acknr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcp_proc_acknr &rArr; free_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[189]"></a>tcp_proc_dupack</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, at_tcp.o(i.tcp_proc_dupack))
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_init
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[187]"></a>tcp_que_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, at_tcp.o(i.tcp_que_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_que_free &rArr; free_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll_sockets
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
</UL>

<P><STRONG><a name="[186]"></a>tcp_que_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, at_tcp.o(i.tcp_que_init))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll_sockets
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_proc_dupack
</UL>

<P><STRONG><a name="[185]"></a>tcp_que_resend</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, at_tcp.o(i.tcp_que_resend))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = tcp_que_resend &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_data
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll_sockets
</UL>

<P><STRONG><a name="[183]"></a>tcp_send_ctrl</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, at_tcp.o(i.tcp_send_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tcp_send_ctrl &rArr; tcp_write &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll_sockets
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_resend
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[18f]"></a>tcp_send_data</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, at_tcp.o(i.tcp_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tcp_send_data &rArr; tcp_write &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_resend
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send
</UL>

<P><STRONG><a name="[18d]"></a>tcp_send_reset</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, at_tcp.o(i.tcp_send_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tcp_send_reset &rArr; tcp_write &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrd_u32be
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[18e]"></a>tcp_set_cwnd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, at_tcp.o(i.tcp_set_cwnd))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[182]"></a>tcp_transit</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, at_tcp.o(i.tcp_transit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcp_transit &rArr; tcp_que_free &rArr; free_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_free
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll_sockets
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[190]"></a>tcp_write</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, at_tcp.o(i.tcp_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tcp_write &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_locadr
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwr_u32be
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum16_val
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum16_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_data
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>

<P><STRONG><a name="[12a]"></a>add_server_id</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at_http.o(i.add_server_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = add_server_id &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_error_msg
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_add_header
</UL>

<P><STRONG><a name="[13e]"></a>chk_post_req</STRONG> (Thumb, 348 bytes, Stack size 32 bytes, at_http.o(i.chk_post_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = chk_post_req &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_scomp
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_strcpy
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_par
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_field
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_header
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
</UL>

<P><STRONG><a name="[14e]"></a>cmp_fname_ext</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, at_http.o(i.cmp_fname_ext))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file_type
</UL>

<P><STRONG><a name="[13f]"></a>cmp_header</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, at_http.o(i.cmp_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cmp_header
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_multipart
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_header
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_post_req
</UL>

<P><STRONG><a name="[14d]"></a>get_file_type</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, at_http.o(i.get_file_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_file_type
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_fname_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
</UL>

<P><STRONG><a name="[143]"></a>get_next_field</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, at_http.o(i.get_next_field))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_multipart
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_header
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_post_req
</UL>

<P><STRONG><a name="[141]"></a>get_next_par</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, at_http.o(i.get_next_par))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_multipart
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_post_req
</UL>

<P><STRONG><a name="[14f]"></a>http_add_header</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, at_http.o(i.http_add_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = http_add_header &rArr; utc_to_http &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgx_content_type
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_copy
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utc_to_http
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_server_id
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_run_server
</UL>

<P><STRONG><a name="[153]"></a>http_error_msg</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, at_http.o(i.http_error_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = http_error_msg &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_copy
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_server_id
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_run_server
</UL>

<P><STRONG><a name="[156]"></a>http_kill_session</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, at_http.o(i.http_kill_session))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = http_kill_session &rArr; free_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_process_data
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fclose
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_run_server
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
</UL>

<P><STRONG><a name="[35]"></a>http_listener</STRONG> (Thumb, 514 bytes, Stack size 32 bytes, at_http.o(i.http_listener))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = http_listener &rArr; http_proc_header &rArr; http_to_utc &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_process_var
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept_host
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_scomp
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_script_line
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_req_line
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_post
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_multipart
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_header
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_open_file
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_kill_session
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file_type
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_post_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_http.o(i.http_init)
</UL>
<P><STRONG><a name="[15c]"></a>http_open_file</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, at_http.o(i.http_open_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = http_open_file &rArr; str_crc32 &rArr; get_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_file_access
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_crc32
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fopen
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_finfo
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_run_server
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
</UL>

<P><STRONG><a name="[15b]"></a>http_proc_header</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, at_http.o(i.http_proc_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = http_proc_header &rArr; http_to_utc &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_check_account
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pos
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b64_to_asc
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_to_utc
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_field
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_header
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
</UL>

<P><STRONG><a name="[160]"></a>http_proc_multipart</STRONG> (Thumb, 338 bytes, Stack size 24 bytes, at_http.o(i.http_proc_multipart))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = http_proc_multipart &rArr; search_delim
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_process_data
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_scomp
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_delim
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_par
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_field
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_header
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
</UL>

<P><STRONG><a name="[15e]"></a>http_proc_post</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, at_http.o(i.http_proc_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = http_proc_post &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_process_data
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
</UL>

<P><STRONG><a name="[142]"></a>http_strcpy</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, at_http.o(i.http_strcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = http_strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_run_server
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_post_req
</UL>

<P><STRONG><a name="[168]"></a>http_to_utc</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, at_http.o(i.http_to_utc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = http_to_utc &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_scomp
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_header
</UL>

<P><STRONG><a name="[15a]"></a>proc_req_line</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, at_http.o(i.proc_req_line))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
</UL>

<P><STRONG><a name="[15f]"></a>read_script_line</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, at_http.o(i.read_script_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = read_script_line
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fgets
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_run_server
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
</UL>

<P><STRONG><a name="[169]"></a>search_delim</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, at_http.o(i.search_delim))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = search_delim
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_scomp
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_multipart
</UL>

<P><STRONG><a name="[152]"></a>utc_to_http</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, at_http.o(i.utc_to_http))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = utc_to_http &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_add_header
</UL>

<P><STRONG><a name="[17b]"></a>get_crc32</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, at_lib.o(i.get_crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_crc32
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_crc32
</UL>

<P><STRONG><a name="[125]"></a>_fp_digits</STRONG> (Thumb, 326 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[11d]"></a>_printf_core</STRONG> (Thumb, 1762 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[128]"></a>_printf_post_padding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[127]"></a>_printf_pre_padding</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[34]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[32]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
